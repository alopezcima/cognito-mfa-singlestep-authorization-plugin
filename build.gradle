apply plugin: "java"

group = "cd.go"
version = "0.2.2"

project.ext.pluginDesc = [
    id         : "cd.go.authorization.cognito-mfa-singlestep",
    version    : project.version,
    goCdVersion: "19.2.0",
    name       : "Cognito TOTP Plugin",
    description: "Cognito single-step TOTP authorization plugin for GoCD",
    vendorName : "GoCD Contributors",
    vendorUrl  : "https://globaldevtools.bbva.com/bitbucket/projects/BGLS/repos/cognito-mfa-singlestep-authorization-plugin/"
]

java {
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly group: "cd.go.plugin", name: "go-plugin-api", version: "19.2.0"
    implementation group: "com.google.code.gson", name: "gson", version: "2.8.9"
    implementation group: "org.apache.commons", name: "commons-lang3", version: "3.8.1"
    implementation group: "commons-io", name: "commons-io", version: "2.7"
    implementation group: "commons-codec", name: "commons-codec", version: "1.13"
    implementation group: "com.amazonaws", name: "aws-java-sdk-cognitoidp", version: "1.12.450"

    testImplementation group: "cd.go.plugin", name: "go-plugin-api", version: "19.2.0"
    testRuntimeOnly group: "org.junit.vintage", name: "junit-vintage-engine", version: "5.8.2"
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter", version: "5.8.2"
    testImplementation group: "org.mockito", name: "mockito-core", version: "5.4.0"
    testImplementation group: "org.mockito", name: "mockito-junit-jupiter", version: "5.4.0"
    testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.2.0"
    testImplementation group: "org.hamcrest", name: "hamcrest", version: "2.2"
    testImplementation group: "org.assertj", name: "assertj-core", version: "3.24.0"
    testImplementation group: "org.skyscreamer", name: "jsonassert", version: "1.5.0"

}

processResources {
    from("src/main/resource-templates") {
        filesMatching("plugin.xml") {
            expand project.pluginDesc
        }

        filesMatching("plugin.properties") {
            expand project.pluginDesc
        }
    }
}

jar {
    from(configurations.runtimeClasspath) {
        into "lib/"
    }
}

tasks.withType(Test).configureEach {
    jvmArgs([
        "--add-opens=java.base/java.lang=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        "--add-opens=java.base/java.io=ALL-UNNAMED"
    ])
}

test {
    useJUnitPlatform()
}